use std::io;

fn first_occurrence(arr: &[i32], target: i32) -> Option<usize> {
    let mut left = 0;
    let mut right = arr.len();
    let mut result = None;

    while left < right {
        let mid = left + (right - left) / 2;

        if arr[mid] == target {
            result = Some(mid);
            right = mid; // Move to the left to find the first occurrence
        } else if arr[mid] < target {
            left = mid + 1;
        } else {
            right = mid;
        }
    }

    result
}

fn main() {
    println!("Enter a sorted array of integers separated by spaces:");
    
    let mut input = String::new();
    io::stdin().read_line(&mut input).expect("Failed to read line");
    
    let mut arr: Vec<i32> = input
        .trim()
        .split_whitespace()
        .map(|s| s.parse().expect("Failed to parse integer"))
        .collect();

    // Sort the array
    arr.sort();

    println!("Enter the target number:");
    
    let mut target = String::new();
    io::stdin().read_line(&mut target).expect("Failed to read line");
    
    let target: i32 = target.trim().parse().expect("Failed to parse integer");

    if let Some(index) = first_occurrence(&arr, target) {
        println!("The first occurrence of {} is at index {}", target, index);
    } else {
        println!("{} is not found in the array", target);
    }
}
