use std::io;

// Definition of a binary tree node
#[derive(Debug)]
struct TreeNode {
    val: i32,
    left: Option<Box<TreeNode>>,
    right: Option<Box<TreeNode>>,
}

impl TreeNode {
    // Constructor to create a new binary tree node
    fn new(val: i32) -> Self {
        TreeNode {
            val,
            left: None,
            right: None,
        }
    }
}

fn max_depth(root: Option<Box<TreeNode>>) -> i32 {
    match root {
        Some(node) => {
            let left_depth = max_depth(node.left);
            let right_depth = max_depth(node.right);
            1 + left_depth.max(right_depth)
        }
        None => 0,
    }
}

// Function to construct a binary tree from a string
fn construct_tree(input: &str) -> Option<Box<TreeNode>> {
    let trimmed = input.trim();
    if trimmed.is_empty() {
        return None;
    }

    let mut iter = trimmed.split_whitespace().map(|s| {
        if s == "null" {
            None
        } else {
            Some(s.parse::<i32>().expect("Invalid integer"))
        }
    });

    let root_val = iter.next().expect("Invalid input");
    let mut root = TreeNode::new(root_val?);

    let mut queue = std::collections::VecDeque::new();
    queue.push_back(&mut root);

    while let Some(mut node) = queue.pop_front() {
        if let Some(val) = iter.next() {
            if let Some(v) = val {
                let left_child = TreeNode { val: v, left: None, right: None };
                node.left = Some(Box::new(left_child));
                queue.push_back(node.left.as_mut().unwrap());
            }
        } else {
            break;
        }

        if let Some(val) = iter.next() {
            if let Some(v) = val {
                let right_child = TreeNode { val: v, left: None, right: None };
                node.right = Some(Box::new(right_child));
                queue.push_back(node.right.as_mut().unwrap());
            }
        } else {
            break;
        }
    }

    Some(Box::new(root))
}

fn main() {
    println!("Enter the binary tree values separated by spaces (use 'null' for missing nodes):");
    let mut input = String::new();
    io::stdin().read_line(&mut input).expect("Failed to read line");

    // Construct the binary tree from the input string
    let root = construct_tree(&input);

    // Calculate and print the maximum depth of the binary tree
    println!("Maximum depth of the binary tree: {}", max_depth(root));
}
