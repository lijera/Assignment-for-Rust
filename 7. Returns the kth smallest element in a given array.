use std::io;

fn kth_smallest(arr: &[i32], k: usize) -> Option<i32> {
    if k == 0 || k > arr.len() {
        return None;
    }
    
    let mut sorted_arr = arr.to_vec();
    sorted_arr.sort();
    
    Some(sorted_arr[k - 1])
}

fn main() {
    println!("Enter a list of integers separated by spaces:");
    
    let mut input = String::new();
    io::stdin().read_line(&mut input).expect("Failed to read line");
    
    let arr: Vec<i32> = input
        .trim()
        .split_whitespace()
        .map(|s| s.parse().expect("Failed to parse integer"))
        .collect();

    println!("Enter the value of k:");
    
    let mut k_input = String::new();
    io::stdin().read_line(&mut k_input).expect("Failed to read line");
    
    let k: usize = k_input.trim().parse().expect("Failed to parse integer");

    if let Some(kth) = kth_smallest(&arr, k) {
        println!("The {}th smallest element is: {}", k, kth);
    } else {
        println!("Invalid input or k out of range");
    }
}
